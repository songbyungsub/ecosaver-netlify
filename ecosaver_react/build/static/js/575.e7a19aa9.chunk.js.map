{"version":3,"file":"static/js/575.e7a19aa9.chunk.js","mappings":"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","sources":["views/ui/Power.js"],"sourcesContent":["/* eslint-disable */\r\nimport { fontSize } from \"@mui/system\";\r\nimport React, { useState, PureComponent, useEffect, forwardRef } from \"react\";\r\nimport {\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CFormSelect,\r\n  CRow,\r\n  CCol,\r\n  CContainer,\r\n  CFormCheck,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardTitle,\r\n  CFormSwitch,\r\n} from '@coreui/react'\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { CChartLine, CChart } from '@coreui/react-chartjs'\r\nimport { ko } from 'date-fns/esm/locale';\r\nimport Swal from \"sweetalert2\";\r\nimport { BarChart, Bar, Rectangle, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport '../../assets/scss/date.css'\r\n// import { endOfMonth, setMonth } from 'date-fns'\r\n// import moment from 'moment';\r\nimport axios from 'axios'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport {Chart} from 'chart.js'\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n// import { colourOptions } from '../data';\r\nimport { Await } from \"react-router-dom\";\r\nimport \"chart.js/auto\";\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Power = () => {\r\n  const getRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return { r, g, b };\r\n  };\r\n\r\n  //date picker\r\n  const [startDate, setStartDate] = useState();\r\n  const [endDate, setEndDate] = useState();\r\n  const [selectedRadio, setSelectedRadio] = useState('');\r\n\r\n  const ExampleCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\r\n      {value}\r\n    </button>\r\n  ));\r\n\r\n  const handleRadioChange = (e) => {\r\n    setSelectedRadio(e.target.value);\r\n    //날짜 선택시 초기화\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  // 국사별 전력 데이터 저장\r\n  const [affairData, setAffairData] = useState([]);\r\n\r\n  //변수\r\n  const [headquarter, setHeadquarter] = useState(''); //본부\r\n  const [affair, setaffair] = useState(''); //국사\r\n  const [chartaffair, setchartaffair] = useState('') //차트에 들어가는 affiar\r\n  const [data_length, setdata_length] = useState('') //데이터 갯수\r\n\r\n  const [selectaffair, setselectaffair] = useState('전체'); //국사초기화용\r\n  const [power, setpower] = useState('') //전력 총 데이터\r\n\r\n  const [time, settime] = useState('') //시간\r\n  const [kwh, setkwh] = useState('') // 전력\r\n  const [unit, setunit] = useState('') // x축 라벨\r\n\r\n  //축조정\r\n  const [beginAtZero, setBeginAtZero] = useState(false);\r\n\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [],\r\n  });\r\n\r\n  const back_url = 'http://121.131.210.83/main/'\r\n\r\n  //프로그래스1\r\n  const [loading, setLoading] = useState(false);\r\n  const toggleLoading = (status) => {\r\n    setLoading(status);\r\n  };\r\n\r\n  //축 조정\r\n  const handleSwitchChange = () => {\r\n    setBeginAtZero((prevValue) => !prevValue);\r\n  };\r\n\r\n  //본부\r\n  useEffect(() => {\r\n    // toggleLoading(true);\r\n    const getRegion = async () => {\r\n      let url = back_url + 'depthheadquarter/'\r\n      setaffair([]);\r\n      try {\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n        })\r\n\r\n        const data = await response.json()\r\n        if (data.returnCode === 'ok') {\r\n          setHeadquarter(data.list)\r\n        }\r\n        else {\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    };\r\n    getRegion();\r\n  }, [])\r\n\r\n  //국사\r\n  const handleSelectaffair = async (selectedOption) => {\r\n    // toggleLoading(true);\r\n    setaffair([]);\r\n    try {\r\n      const response = await fetch(back_url + 'depthaffair/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          data: {\r\n            headquarter: selectedOption,\r\n          },\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.returnCode === 'ok') {\r\n        setaffair(data.list)\r\n      } else {\r\n        // 에러 처리\r\n        console.error(data.error);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n\r\n  };\r\n\r\n  // select 다중 선택 값들 list에 담기\r\n  const handleaffairdata = (e) => {\r\n    const selectedValues = e.map((option) => option.value);\r\n    if (selectedValues.includes('전체')) {\r\n      //전체를 제외한 모든 옵션들\r\n      setselectaffair(affair.filter((option) => option !== '전체'));\r\n    } else {\r\n      //아니면 그냥 선택한 옵션들\r\n      setselectaffair(selectedValues);\r\n    }\r\n  }\r\n\r\n  // \"전체\"를 포함한 한개씩 받기\r\n  // const handleSearch_power = async () => {\r\n  //   setLoading(true);\r\n  //   setAffairData([]);\r\n  //   setunit('kW/h')\r\n\r\n\r\n  //   if (selectaffair === '전체') {\r\n  //     const promises = affair.map(async (selectedAffair) => {\r\n  //       let searchData = {};\r\n\r\n  //       if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: endDate.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"month\") {\r\n  //         const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n  //         lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"year\") {\r\n  //         const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n  //         lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"day\") {\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: endDate.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       }\r\n\r\n  //       const result = await fetchData_power(searchData);\r\n\r\n  //       if (result) {\r\n  //         // 국사 데이터 추가\r\n  //         setAffairData((prevData) => [\r\n  //           ...prevData,\r\n  //           {\r\n  //             label: selectedAffair,\r\n  //             time_list: result.time_list,\r\n  //             ele_list: result.ele_list,\r\n  //           },\r\n  //         ]);\r\n  //       }\r\n  //     });\r\n\r\n  //     await Promise.all(promises);\r\n  //   }\r\n  //   else {\r\n  //     let searchData = {};\r\n\r\n  //     if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: endDate.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"month\") {\r\n  //       const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n  //       lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"year\") {\r\n  //       const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n  //       lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"day\") {\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: endDate.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     }\r\n\r\n  //     const result = await fetchData_power(searchData);\r\n\r\n  //     if (result) {\r\n  //       setAffairData([\r\n  //         {\r\n  //           label: selectaffair,\r\n  //           time_list: result.time_list,\r\n  //           ele_list: result.ele_list,\r\n  //         },\r\n  //       ]);\r\n  //     }\r\n  //   }\r\n\r\n  //   setLoading(false); // 로딩 종료\r\n  // };\r\n\r\n  //전력량 조회 버튼 클릭 --> 다중 선택 searchdata 담기\r\n  const handleSearch_power = async () => {\r\n    setLoading(true);\r\n    setAffairData([]);\r\n    setunit('kW/h');\r\n\r\n    try {\r\n      const promises = selectaffair.map(async (selectedAffair) => {\r\n        let searchData = {};\r\n\r\n        if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: endDate.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"month\") {\r\n          const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n          lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"year\") {\r\n          const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n          lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"day\") {\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: endDate.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        }\r\n\r\n        const result = await fetchData_power(searchData);\r\n\r\n        if (result) {\r\n          // 국사 데이터 추가\r\n          setAffairData((prevData) => [\r\n            ...prevData,\r\n            {\r\n              label: selectedAffair,\r\n              time_list: result.time_list,\r\n              ele_list: result.ele_list,\r\n            },\r\n          ]);\r\n        }\r\n      });\r\n\r\n      // 모든 비동기 작업이 완료될 때까지 대기\r\n      await Promise.all(promises);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n\r\n    setLoading(false); // 로딩 종료\r\n  };\r\n\r\n\r\n  //전력량 조회 버튼 클릭 --> searchdata로 request\r\n  const fetchData_power = async (searchData) => {\r\n    try {\r\n      const response = await fetch(back_url + 'quarterpower/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          data: searchData,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n\r\n\r\n      if (data.returnCode === 'ok') {\r\n        // console.log(data)\r\n        const time_list = [];\r\n        const ele_list = [];\r\n        setchartaffair(data.list.affair)\r\n        setdata_length(data.list.length)\r\n\r\n\r\n        data.list.data.map((value, index) => {\r\n          const roundedpower = Math.round(value.power);\r\n          if (selectedRadio === \"quarter\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 16));\r\n            ele_list.push(roundedpower);\r\n          } else if (selectedRadio === \"half\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 16));\r\n            ele_list.push(roundedpower);\r\n          } else if (selectedRadio === \"hour\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 13));\r\n            ele_list.push(roundedpower);\r\n          } else if (selectedRadio === \"day\") {\r\n            time_list.push(value.date.slice(0, 10));\r\n            ele_list.push(roundedpower);\r\n          } else if (selectedRadio === \"month\") {\r\n            time_list.push(value.date.slice(0, 7));\r\n            ele_list.push(roundedpower);\r\n          } else if (selectedRadio === \"year\") {\r\n            time_list.push(value.date.slice(0, 4));\r\n            ele_list.push(roundedpower);\r\n          }\r\n        });\r\n\r\n        // console.log(data.list)\r\n        return { time_list, ele_list };\r\n        // console.log(ele_list\r\n      } else {\r\n        // Handle the error\r\n        console.error(data.error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: '선택된 날짜의 데이터가 없습니다.',\r\n          confirmButtonText: \"확인\",\r\n        });\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // \"전체\"를 포함한 한개씩 받기\r\n  // const handleSearch_cost = async () => {\r\n  //   setLoading(true);\r\n  //   setAffairData([]);\r\n  //   setunit('원')\r\n\r\n  //   if (selectaffair === '전체') {\r\n  //     const promises = affair.map(async (selectedAffair) => {\r\n  //       let searchData = {};\r\n\r\n  //       if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: endDate.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"month\") {\r\n  //         const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n  //         lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"year\") {\r\n  //         const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n  //         lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       } else if (selectedRadio === \"day\") {\r\n  //         searchData = {\r\n  //           affair: selectedAffair,\r\n  //           startDate: startDate.toISOString().slice(2, 10),\r\n  //           endDate: endDate.toISOString().slice(2, 10),\r\n  //           selectedRadio: selectedRadio,\r\n  //         };\r\n  //       }\r\n\r\n  //       const result = await fetchData_cost(searchData);\r\n\r\n  //       if (result) {\r\n  //         // 국사 데이터 추가\r\n  //         setAffairData((prevData) => [\r\n  //           ...prevData,\r\n  //           {\r\n  //             label: selectedAffair,\r\n  //             time_list: result.time_list,\r\n  //             ele_list: result.ele_list,\r\n  //           },\r\n  //         ]);\r\n  //       }\r\n  //     });\r\n\r\n  //     await Promise.all(promises);\r\n  //   }\r\n  //   else {\r\n  //     let searchData = {};\r\n\r\n  //     if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: endDate.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"month\") {\r\n  //       const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n  //       lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"year\") {\r\n  //       const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n  //       lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     } else if (selectedRadio === \"day\") {\r\n  //       searchData = {\r\n  //         affair: selectaffair,\r\n  //         startDate: startDate.toISOString().slice(2, 10),\r\n  //         endDate: endDate.toISOString().slice(2, 10),\r\n  //         selectedRadio: selectedRadio,\r\n  //       };\r\n  //     }\r\n\r\n  //     const result = await fetchData_cost(searchData);\r\n\r\n  //     if (result) {\r\n  //       setAffairData([\r\n  //         {\r\n  //           label: selectaffair,\r\n  //           time_list: result.time_list,\r\n  //           ele_list: result.ele_list,\r\n  //         },\r\n  //       ]);\r\n  //     }\r\n  //   }\r\n\r\n  //   setLoading(false); // 로딩 종료\r\n  // };\r\n\r\n  //전력비 조회 버튼 클릭 --> 다중 선택 searchdata 담기\r\n  const handleSearch_cost = async () => {\r\n    setLoading(true);\r\n    setAffairData([]);\r\n    setunit('원')\r\n\r\n    try {\r\n      const promises = selectaffair.map(async (selectedAffair) => {\r\n        let searchData = {};\r\n\r\n        if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: endDate.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"month\") {\r\n          const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n          lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"year\") {\r\n          const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n          lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        } else if (selectedRadio === \"day\") {\r\n          searchData = {\r\n            affair: selectedAffair,\r\n            startDate: startDate.toISOString().slice(2, 10),\r\n            endDate: endDate.toISOString().slice(2, 10),\r\n            selectedRadio: selectedRadio,\r\n          };\r\n        }\r\n\r\n        const result = await fetchData_cost(searchData);\r\n\r\n        if (result) {\r\n          // 국사 데이터 추가\r\n          setAffairData((prevData) => [\r\n            ...prevData,\r\n            {\r\n              label: selectedAffair,\r\n              time_list: result.time_list,\r\n              ele_list: result.ele_list,\r\n            },\r\n          ]);\r\n        }\r\n      });\r\n\r\n      // 모든 비동기 작업이 완료될 때까지 대기\r\n      await Promise.all(promises);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n\r\n    setLoading(false); // 로딩 종료\r\n  };\r\n\r\n\r\n\r\n  //전력비 조회 버튼 클릭 --> searchdata로 request\r\n  const fetchData_cost = async (searchData) => {\r\n    try {\r\n      const response = await fetch(back_url + 'quarterpower/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          data: searchData,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n\r\n\r\n      if (data.returnCode === 'ok') {\r\n        // console.log(data)\r\n        const time_list = [];\r\n        const ele_list = [];\r\n        setchartaffair(data.list.affair)\r\n        setdata_length(data.list.length)\r\n\r\n        data.list.data.map((value, index) => {\r\n          const roundcost = Math.round(value.cost);\r\n          if (selectedRadio === \"quarter\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 16));\r\n            ele_list.push(roundcost);\r\n          } else if (selectedRadio === \"half\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 16));\r\n            ele_list.push(roundcost);\r\n          } else if (selectedRadio === \"hour\") {\r\n            time_list.push(value.date.replace('T', ' ').slice(5, 13));\r\n            ele_list.push(roundcost);\r\n          } else if (selectedRadio === \"day\") {\r\n            time_list.push(value.date.slice(0, 10));\r\n            ele_list.push(roundcost);\r\n          } else if (selectedRadio === \"month\") {\r\n            time_list.push(value.date.slice(0, 7));\r\n            ele_list.push(roundcost);\r\n          } else if (selectedRadio === \"year\") {\r\n            time_list.push(value.date.slice(0, 4));\r\n            ele_list.push(roundcost);\r\n          }\r\n        });\r\n\r\n        // console.log(data.list)\r\n        return { time_list, ele_list };\r\n        // console.log(ele_list\r\n      } else {\r\n        // Handle the error\r\n        console.error(data.error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: '선택된 날짜의 데이터가 없습니다.',\r\n          confirmButtonText: \"확인\",\r\n        });\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateChart = () => {\r\n      setChartData({\r\n        labels: affairData.length > 0 ? affairData[0].time_list : [],\r\n        datasets: affairData.map((data, index) => ({\r\n          datalabels: {\r\n            display: false,\r\n          },\r\n          label: data.label,\r\n          borderColor: `rgba(${getRandomColor().r}, ${getRandomColor().g}, ${getRandomColor().b}, 1)`,\r\n          pointBackgroundColor: \"white\",\r\n          pointRadius: data_length > 100 ? 1 : 3,\r\n          data: data.ele_list,\r\n        })),\r\n      });\r\n    };\r\n\r\n    // 스위치 값이 변경될 때마다 차트 업데이트\r\n    updateChart();\r\n  }, [beginAtZero, affairData, data_length]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CContainer fluid >\r\n        <CRow>\r\n          <CCol xs={1} style={{ width: '13rem' }}>\r\n            <span><b>본부</b></span>\r\n            <CFormSelect\r\n\r\n              aria-label=\"Default select example\"\r\n              options={[\r\n                '선택',\r\n                { label: headquarter[0], value: headquarter[0] },\r\n                { label: headquarter[1], value: headquarter[1] },\r\n                { label: headquarter[2], value: headquarter[2] },\r\n                { label: headquarter[3], value: headquarter[3] },\r\n                { label: headquarter[4], value: headquarter[4] },\r\n                { label: headquarter[5], value: headquarter[5] },\r\n                { label: headquarter[6], value: headquarter[6] },\r\n                { label: headquarter[7], value: headquarter[7] },\r\n                { label: headquarter[8], value: headquarter[8] },\r\n              ]}\r\n              onChange={(e) => handleSelectaffair(e.target.value)}\r\n            />\r\n          </CCol>\r\n          <CCol xs={3}>\r\n            <span><b>국사</b></span>\r\n            {/* <CFormSelect\r\n              // style={{ width: '8rem' }}\r\n              aria-label=\"Default select example\"\r\n              // value={setdefaultall}/\r\n              options={[\r\n                { label: \"전체\", value: '전체' },\r\n                ...Array.from({ length: affair.length }, (_, index) => (\r\n                  { label: affair[index], value: affair[index] }\r\n                )),\r\n              ]}\r\n              onChange={handleaffairdata}\r\n            /> */}\r\n            <Select\r\n              closeMenuOnSelect={false}\r\n              components={animatedComponents}\r\n              isMulti\r\n              // value={setdefaultall}/\r\n              options={[\r\n                { label: \"전체\", value: '전체' },\r\n                ...Array.from({ length: affair.length }, (_, index) => (\r\n                  { label: affair[index], value: affair[index] }\r\n                )),\r\n              ]}\r\n              onChange={handleaffairdata}\r\n            />\r\n          </CCol>\r\n          <CCol xs={1}>\r\n            <span><b>기간</b></span>\r\n            <CFormSelect\r\n              aria-label=\"Default select example\"\r\n              value={selectedRadio}  // 현재 선택된 값을 value로 설정\r\n              options={[\r\n                '선택',\r\n                { label: '15분', value: 'quarter' },\r\n                { label: '30분', value: 'half' },\r\n                { label: '1시간', value: 'hour' },\r\n                { label: '일별', value: 'day' },\r\n                { label: '월별', value: 'month' },\r\n                { label: '년별', value: 'year' },\r\n              ]}\r\n              onChange={handleRadioChange} // 선택 시 상태 업데이트\r\n            >\r\n            </CFormSelect>\r\n          </CCol>\r\n\r\n\r\n          {selectedRadio === \"quarter\" ||\r\n            selectedRadio === \"half\" ||\r\n            selectedRadio === \"hour\" ? (\r\n            <CCol xs={2} style={{ marginLeft: '10px', alignItems: 'flex-end' }}>\r\n              {/* <br></br> */}\r\n              <span style={{ marginLeft: '10px', display: 'flex', alignItems: 'flex-end', marginRight: '10px', marginBottom: '7px' }}><b> 날짜 </b></span>\r\n              <DatePicker\r\n                customInput={<ExampleCustomInput />}\r\n                locale={ko}\r\n                dateFormat=\"yyyy년 MM월 dd일\"\r\n                selected={startDate}\r\n                onChange={(date) => setStartDate(date)}\r\n                selectsStart\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n              />\r\n              <span style={{ marginLeft: '60px', display: 'flex', alignItems: 'flex-end', marginTop: '5px', marginBottom: '5px' }}><b>부터</b></span>\r\n              <DatePicker\r\n                customInput={<ExampleCustomInput />}\r\n                locale={ko}\r\n                dateFormat=\"yyyy년 MM월 dd일\"\r\n                selected={endDate}\r\n                onChange={(date) => setEndDate(date)}\r\n                selectsEnd\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n              />\r\n            </CCol>\r\n          ) : null}\r\n\r\n          {selectedRadio === \"day\" ? (\r\n            <>\r\n              <CCol xs={2} style={{ marginLeft: '10px', alignItems: 'flex-end' }}>\r\n                {/* <br></br> */}\r\n                <span style={{ marginLeft: '10px', display: 'flex', alignItems: 'flex-end', marginRight: '10px', marginBottom: '7px' }}><b> 날짜 </b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  locale={ko}\r\n                  dateFormat=\"yyyy년 MM월 dd일\"\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  selectsStart\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                />\r\n                <span style={{ marginLeft: '60px', display: 'flex', alignItems: 'flex-end', marginTop: '5px', marginBottom: '5px' }}><b>부터</b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  locale={ko}\r\n                  dateFormat=\"yyyy년 MM월 dd일\"\r\n                  selected={endDate}\r\n                  onChange={(date) => setEndDate(date)}\r\n                  selectsEnd\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  minDate={startDate}\r\n                />\r\n              </CCol>\r\n            </>\r\n          ) : null}\r\n\r\n          {selectedRadio === \"month\" ? (\r\n            <>\r\n              <CCol xs={2} style={{ marginLeft: '10px', alignItems: 'flex-end' }}>\r\n                <span style={{ marginLeft: '10px', display: 'flex', alignItems: 'flex-end', marginRight: '10px', marginBottom: '7px' }}><b> 날짜 </b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  locale={ko}\r\n                  dateFormat=\"yyyy년 MM월\"\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  selectsStart\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  showMonthYearPicker\r\n                />\r\n                <span style={{ marginLeft: '45px', display: 'flex', alignItems: 'flex-end', marginTop: '5px', marginBottom: '5px' }}><b>부터</b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  locale={ko}\r\n                  dateFormat=\"yyyy년 MM월\"\r\n                  selected={endDate}\r\n                  onChange={(date) => setEndDate(date)}\r\n                  selectsEnd\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  showMonthYearPicker\r\n                />\r\n              </CCol>\r\n            </>\r\n          ) : null}\r\n\r\n          {selectedRadio === \"year\" ? (\r\n            <>\r\n              <CCol xs={1} style={{ marginLeft: '10px', alignItems: 'flex-end' }}>\r\n                {/* <br></br> */}\r\n                <span style={{ marginLeft: '10px', display: 'flex', alignItems: 'flex-end', marginRight: '10px', marginBottom: '7px' }}><b> 날짜 </b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  selectsStart\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  dateFormat=\"yyyy년\"\r\n                  showYearPicker\r\n                />\r\n                <span style={{ marginLeft: '25px', display: 'flex', alignItems: 'flex-end', marginTop: '5px', marginBottom: '5px' }}><b>부터</b></span>\r\n                <DatePicker\r\n                  customInput={<ExampleCustomInput />}\r\n                  selected={endDate}\r\n                  onChange={(date) => setEndDate(date)}\r\n                  selectsEnd\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  dateFormat=\"yyyy년\"\r\n                  showYearPicker\r\n                />\r\n              </CCol>\r\n            </>\r\n          ) : null}\r\n\r\n          <CCol xs={2}>\r\n            <br></br>\r\n            <CButton style={{ fontSize: '15px' }} onClick={handleSearch_power} color=\"success\" variant=\"outline\">전력량 조회</CButton>\r\n            <CButton style={{ marginLeft: '15px', fontSize: '15px' }} onClick={handleSearch_cost} color=\"success\" variant=\"outline\">전력비 조회</CButton>\r\n          </CCol>\r\n        </CRow>\r\n\r\n        <br></br>\r\n        <CRow>\r\n          <CCard style={{ width: '100rem', height: '50rem', position: 'relative' }}>\r\n            {loading && ( // 로딩 중일 때만 spinner 표시\r\n              <div\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: 0,\r\n                  left: 0,\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  background: 'rgba(255, 255, 255, 0.8)',\r\n                }}\r\n              >\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                  <span className=\"visually-hidden\">Loading...</span>\r\n                </Spinner>\r\n              </div>\r\n            )}\r\n\r\n\r\n            {unit === 'kW/h' && (\r\n              <CCardBody style={{ width: '100%', height: '100%' }}>\r\n                <CCardTitle><b>전력 사용 현황</b></CCardTitle>\r\n                <br></br>\r\n                <CFormSwitch\r\n                  label=\"체크시 y축 0부터 시작\"\r\n                  id=\"range_start\"\r\n                  // defaultChecked={beginAtZero}\r\n                  onChange={handleSwitchChange}\r\n                />\r\n                <br></br>\r\n                <div style={{ width: '100%', height: '42rem' }}>\r\n                  <Line\r\n                    style={{ width: '100%', height: '100%', maxHeight: '100%' }}\r\n                    type=\"line\"\r\n                    //data GPT 참조\r\n                    data={{\r\n                      labels: affairData.length > 0 ? affairData[0].time_list : [],\r\n                      datasets: affairData.map((data, index) => ({\r\n                        datalabels: {\r\n                          display: false\r\n                        },\r\n                        label: data.label,\r\n                        // backgroundColor: `rgba(${getRandomColor().r}, ${getRandomColor().g}, ${getRandomColor().b}, 0.2)`, \r\n                        borderColor: `rgba(${getRandomColor().r}, ${getRandomColor().g}, ${getRandomColor().b}, 1)`,\r\n                        pointBackgroundColor: \"white\",\r\n                        // pointBorderColor: \"black\",\r\n                        pointRadius: data_length > 100 ? 1 : 3,\r\n                        data: data.ele_list,\r\n                      })),\r\n                    }}\r\n                    options={{\r\n                      plugins: {\r\n                        legend: {\r\n                          labels: {},\r\n                        },\r\n                        tooltip: {\r\n                          callbacks: {\r\n                            label: (context) => {\r\n                              const datasetLabel = context.dataset.label || '';\r\n                              const value = context.parsed.y.toLocaleString('en-AU') + ' kW/h';\r\n                              return datasetLabel + ': ' + value;\r\n                            },\r\n                          },\r\n                        },\r\n                      },\r\n                      scales: {\r\n                        x: {\r\n                          grid: {},\r\n                          ticks: {},\r\n                        },\r\n                        y: {\r\n                          beginAtZero: beginAtZero,\r\n                          grid: {},\r\n                          ticks: {\r\n                            callback: (value) => Math.round(value).toLocaleString('en-AU') + 'kW/h',\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n              </CCardBody>\r\n            )}\r\n\r\n            {unit === '원' && (\r\n              <CCardBody style={{ width: '100%', height: '100%' }}>\r\n                <CCardTitle><b>전력비 청구 현황</b></CCardTitle>\r\n                <br></br>\r\n                <CFormSwitch\r\n                  label=\"체크시 y축 0부터 시작\"\r\n                  id=\"range_start\"\r\n                  // defaultChecked={beginAtZero}\r\n                  onChange={handleSwitchChange}\r\n                />\r\n                <br></br>\r\n                <div style={{ width: '100%', height: '42rem' }}>\r\n                  <Line\r\n                    style={{ width: '100%', height: '100%', maxHeight: '100%' }}\r\n                    type=\"line\"\r\n                    //data GPT 참조\r\n                    data={{\r\n                      labels: affairData.length > 0 ? affairData[0].time_list : [],\r\n                      datasets: affairData.map((data, index) => ({\r\n                        datalabels: {\r\n                          display: false\r\n                        },\r\n                        label: data.label,\r\n                        // backgroundColor: `rgba(${getRandomColor().r}, ${getRandomColor().g}, ${getRandomColor().b}, 0.2)`, \r\n                        borderColor: `rgba(${getRandomColor().r}, ${getRandomColor().g}, ${getRandomColor().b}, 1)`,\r\n                        pointBackgroundColor: \"white\",\r\n                        pointBorderColor: \"black\",\r\n                        pointRadius: data_length > 100 ? 1 : 3,\r\n                        data: data.ele_list,\r\n                      })),\r\n                    }}\r\n                    options={{\r\n                      plugins: {\r\n                        legend: {\r\n                          labels: {},\r\n                        },\r\n                        tooltip: {\r\n                          callbacks: {\r\n                            label: (context) => {\r\n                              const datasetLabel = context.dataset.label || '';\r\n                              const value = context.parsed.y.toLocaleString('en-AU') + ' 원';\r\n                              return datasetLabel + ': ' + value;\r\n                            },\r\n                          },\r\n                        },\r\n\r\n                      },\r\n                      scales: {\r\n                        x: {\r\n                          grid: {},\r\n                          ticks: {},\r\n                        },\r\n                        y: {\r\n                          beginAtZero: beginAtZero,\r\n                          grid: {},\r\n                          ticks: {\r\n                            callback: (value) => Math.round(value).toLocaleString('en-AU') + '원',\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n              </CCardBody>\r\n            )}\r\n          </CCard>\r\n\r\n        </CRow>\r\n      </CContainer>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Power;\r\n\r\n\r\n\r\n\r\n//바차트 \r\n{/* <CChart\r\n  type=\"bar\"\r\n  data={{\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: '22년 전력 사용량',\r\n        backgroundColor: '#f87979',\r\n        data: [40, 20, 12, 39, 10, 40, 39, 80, 40],\r\n      },\r\n      {\r\n        label: '23년 전력 사용량',\r\n        backgroundColor: '#FFFF00',\r\n        data: [50, 10, 53, 19, 30, 20, 19, 60, 50],\r\n      },\r\n    ],\r\n  }}\r\n  labels=\"months\"\r\n  options={{\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          // color: getStyle('--cui-body-color'),\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            const datasetLabel = context.dataset.label || '';\r\n            const value = context.parsed.y + ' KW';\r\n            return datasetLabel + ': ' + value;\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          // color: getStyle('--cui-border-color-translucent'),\r\n        },\r\n        ticks: {\r\n          // color: getStyle('--cui-body-color'),\r\n        },\r\n      },\r\n      y: {\r\n        grid: {\r\n          // color: getStyle('--cui-border-color-translucent'),\r\n        },\r\n        ticks: {\r\n          // color: getStyle('--cui-body-color'),\r\n          callback: (value) => value + 'KW', // \r\n        },\r\n      },\r\n    },\r\n  }}\r\n/> */}\r\n\r\n\r\n\r\n\r\n//조회 버튼 클릭\r\n\r\n// const handleSearch = async () => {\r\n//   setLoading(true);\r\n//   var searchData = {}\r\n//  // \"전체\" 일 때\r\n// if (selectaffair === '전체') {\r\n//   for (const selectedAffair of affair) {\r\n//     if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n//       searchData = {\r\n//         affair: selectedAffair,\r\n//         startDate: startDate.toISOString().slice(2, 10),\r\n//         endDate: endDate.toISOString().slice(2, 10),\r\n//         selectedRadio: selectedRadio,\r\n//       };\r\n//     } else if (selectedRadio === \"month\") {\r\n//       const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n//       lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n//       searchData = {\r\n//         affair: selectedAffair,\r\n//         startDate: startDate.toISOString().slice(2, 10),\r\n//         endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n//         selectedRadio: selectedRadio,\r\n//       };\r\n//     } else if (selectedRadio === \"year\") {\r\n//       const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n//       lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n//       searchData = {\r\n//         affair: selectedAffair,\r\n//         startDate: startDate.toISOString().slice(2, 10),\r\n//         endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n//         selectedRadio: selectedRadio,\r\n//       };\r\n//     } else if (selectedRadio === \"day\") {\r\n//       searchData = {\r\n//         affair: selectedAffair,\r\n//         startDate: startDate.toISOString().slice(2, 10),\r\n//         endDate: endDate.toISOString().slice(2, 10),\r\n//         selectedRadio: selectedRadio,\r\n//       };\r\n//     }\r\n\r\n//     try {\r\n//       const response = fetch(back_url + 'quarterpower/', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           data: searchData,\r\n//         }),\r\n//       });\r\n\r\n//       const data = response.json();\r\n\r\n//       if (data.returnCode === 'ok') {\r\n//       const time_list = []\r\n//       const ele_list = []\r\n\r\n//       data.list.map((value, index) => {\r\n//         const roundedpower = Math.round(value.power);\r\n//         if (selectedRadio === \"quarter\") {\r\n//           time_list.push(value.date.replace('T',' ').slice(5,16))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//         else if (selectedRadio === \"half\") {\r\n//           time_list.push(value.date.replace('T',' ').slice(5,16))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//         else if (selectedRadio === \"hour\") {\r\n//           time_list.push(value.date.replace('T',' ').slice(5,13))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//         else if (selectedRadio === \"day\") {\r\n//           time_list.push(value.date.slice(0,10))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//         else if (selectedRadio === \"month\") {\r\n//           time_list.push(value.date.slice(0,7))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//         else if (selectedRadio === \"year\") {\r\n//           time_list.push(value.date.slice(0,4))\r\n//           ele_list.push(roundedpower)\r\n//         }\r\n//       })\r\n\r\n//       settime(time_list)\r\n//       setkwh(ele_list)\r\n//       console.log(data.list)\r\n//     }\r\n//     else {\r\n//       // Handle the error\r\n//       console.error(data.error);\r\n//       Swal.fire({\r\n//         icon: 'error',\r\n//         title: '선택된 날짜의 데이터가 없습니다.',\r\n//         confirmButtonText: \"확인\",\r\n//       });\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error.message);\r\n//   }finally {\r\n//     setLoading(false); // 로딩 종료\r\n//   }\r\n// }\r\n// }\r\n// else {\r\n// if (selectedRadio === \"quarter\" || selectedRadio === \"half\" || selectedRadio === \"hour\") {\r\n//   searchData = {\r\n//     affair: selectaffair,\r\n//     startDate: startDate.toISOString().slice(2, 10),\r\n//     endDate: endDate.toISOString().slice(2, 10),\r\n//     selectedRadio: selectedRadio,\r\n//   };\r\n// } else if (selectedRadio === \"month\") {\r\n//   const lastDayOfMonth = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);\r\n//   lastDayOfMonth.setDate(lastDayOfMonth.getDate() + 1);\r\n//   searchData = {\r\n//     affair: selectaffair,\r\n//     startDate: startDate.toISOString().slice(2, 10),\r\n//     endDate: lastDayOfMonth.toISOString().slice(2, 10),\r\n//     selectedRadio: selectedRadio,\r\n//   };\r\n// } else if (selectedRadio === \"year\") {\r\n//   const lastDayOfYear = new Date(endDate.getFullYear() + 1, 0, 0);\r\n//   lastDayOfYear.setDate(lastDayOfYear.getDate() + 1);\r\n//   searchData = {\r\n//     affair: selectaffair,\r\n//     startDate: startDate.toISOString().slice(2, 10),\r\n//     endDate: lastDayOfYear.toISOString().slice(2, 10),\r\n//     selectedRadio: selectedRadio,\r\n//   };\r\n// } else if (selectedRadio === \"day\") {\r\n//   searchData = {\r\n//     affair: selectaffair,\r\n//     startDate: startDate.toISOString().slice(2, 10),\r\n//     endDate: endDate.toISOString().slice(2, 10),\r\n//     selectedRadio: selectedRadio,\r\n//   };\r\n// }\r\n\r\n// try {\r\n//   const response = await fetch(back_url + 'quarterpower/', {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify({\r\n//       data: searchData,\r\n//     }),\r\n//   });\r\n\r\n//   const data = await response.json();\r\n\r\n//   if (data.returnCode === 'ok') {\r\n//   const time_list = []\r\n//   const ele_list = []\r\n\r\n//   data.list.map((value, index) => {\r\n//     const roundedpower = Math.round(value.power);\r\n//     if (selectedRadio === \"quarter\") {\r\n//       time_list.push(value.date.replace('T',' ').slice(5,16))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//     else if (selectedRadio === \"half\") {\r\n//       time_list.push(value.date.replace('T',' ').slice(5,16))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//     else if (selectedRadio === \"hour\") {\r\n//       time_list.push(value.date.replace('T',' ').slice(5,13))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//     else if (selectedRadio === \"day\") {\r\n//       time_list.push(value.date.slice(0,10))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//     else if (selectedRadio === \"month\") {\r\n//       time_list.push(value.date.slice(0,7))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//     else if (selectedRadio === \"year\") {\r\n//       time_list.push(value.date.slice(0,4))\r\n//       ele_list.push(roundedpower)\r\n//     }\r\n//   })\r\n\r\n//   settime(time_list)\r\n//   setkwh(ele_list)\r\n//   // console.log(ele_list)\r\n// }\r\n// else {\r\n//   // Handle the error\r\n//   console.error(data.error);\r\n//   Swal.fire({\r\n//     icon: 'error',\r\n//     title: '선택된 날짜의 데이터가 없습니다.',\r\n//     confirmButtonText: \"확인\",\r\n//   });\r\n// }\r\n// } catch (error) {\r\n// console.log(error.message);\r\n// }finally {\r\n//   setLoading(false); // 로딩 종료\r\n// }\r\n// }\r\n// }"],"names":["animatedComponents","makeAnimated","Power","getRandomColor","r","Math","floor","random","g","b","startDate","setStartDate","useState","endDate","setEndDate","selectedRadio","setSelectedRadio","ExampleCustomInput","forwardRef","_ref","ref","value","onClick","_jsx","className","children","affairData","setAffairData","headquarter","setHeadquarter","affair","setaffair","chartaffair","setchartaffair","data_length","setdata_length","selectaffair","setselectaffair","power","setpower","time","settime","kwh","setkwh","unit","setunit","beginAtZero","setBeginAtZero","chartData","setChartData","labels","datasets","back_url","loading","setLoading","handleSwitchChange","prevValue","useEffect","async","url","response","fetch","method","data","json","returnCode","list","error","console","log","getRegion","fetchData_power","headers","body","JSON","stringify","searchData","time_list","ele_list","length","map","index","roundedpower","round","push","date","replace","slice","Swal","icon","title","confirmButtonText","message","fetchData_cost","roundcost","cost","datalabels","display","label","borderColor","concat","pointBackgroundColor","pointRadius","_jsxs","CContainer","fluid","CRow","CCol","xs","style","width","CFormSelect","options","onChange","e","selectedOption","handleSelectaffair","target","Select","closeMenuOnSelect","components","isMulti","Array","from","_","selectedValues","option","includes","filter","Date","marginLeft","alignItems","marginRight","marginBottom","DatePicker","customInput","locale","ko","dateFormat","selected","selectsStart","marginTop","selectsEnd","minDate","_Fragment","showMonthYearPicker","showYearPicker","CButton","fontSize","promises","selectedAffair","toISOString","lastDayOfMonth","getFullYear","getMonth","setDate","getDate","lastDayOfYear","result","prevData","Promise","all","color","variant","CCard","height","position","top","left","justifyContent","background","Spinner","animation","role","CCardBody","CCardTitle","CFormSwitch","id","Line","maxHeight","type","plugins","legend","tooltip","callbacks","context","dataset","parsed","y","toLocaleString","scales","x","grid","ticks","callback","pointBorderColor"],"sourceRoot":""}