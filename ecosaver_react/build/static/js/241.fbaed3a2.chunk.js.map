{"version":3,"file":"static/js/241.fbaed3a2.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CFormSwitch.tsx","../node_modules/react-select/dist/useStateManager-7e1e8489.esm.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-select/dist/react-select.esm.js","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormText: PolymorphicRefForwardingComponent<'div', CFormTextProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CFormTextProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCFormText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\n\nexport interface CFormSwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put switch on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Size the component large or extra large. Works only with `switch`.\n   */\n  size?: 'lg' | 'xl'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormSwitch = forwardRef<HTMLInputElement, CFormSwitchProps>(\n  ({ className, id, invalid, label, reverse, size, type = 'checkbox', valid, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'form-check form-switch',\n          {\n            'form-check-reverse': reverse,\n            [`form-switch-${size}`]: size,\n            'is-invalid': invalid,\n            'is-valid': valid,\n          },\n          className,\n        )}\n      >\n        <input\n          type={type}\n          className={classNames('form-check-input', {\n            'is-invalid': invalid,\n            'is-valid': valid,\n          })}\n          id={id}\n          {...rest}\n          ref={ref}\n        />\n        {label && (\n          <CFormLabel customClassName=\"form-check-label\" {...(id && { htmlFor: id })}>\n            {label}\n          </CFormLabel>\n        )}\n      </div>\n    )\n  },\n)\n\nCFormSwitch.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  invalid: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'xl']),\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  valid: PropTypes.bool,\n}\n\nCFormSwitch.displayName = 'CFormSwitch'\n","import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\nimport _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport { useState, useCallback } from 'react';\n\nvar _excluded = [\"defaultInputValue\", \"defaultMenuIsOpen\", \"defaultValue\", \"inputValue\", \"menuIsOpen\", \"onChange\", \"onInputChange\", \"onMenuClose\", \"onMenuOpen\", \"value\"];\nfunction useStateManager(_ref) {\n  var _ref$defaultInputValu = _ref.defaultInputValue,\n    defaultInputValue = _ref$defaultInputValu === void 0 ? '' : _ref$defaultInputValu,\n    _ref$defaultMenuIsOpe = _ref.defaultMenuIsOpen,\n    defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe,\n    _ref$defaultValue = _ref.defaultValue,\n    defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,\n    propsInputValue = _ref.inputValue,\n    propsMenuIsOpen = _ref.menuIsOpen,\n    propsOnChange = _ref.onChange,\n    propsOnInputChange = _ref.onInputChange,\n    propsOnMenuClose = _ref.onMenuClose,\n    propsOnMenuOpen = _ref.onMenuOpen,\n    propsValue = _ref.value,\n    restSelectProps = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState(propsInputValue !== undefined ? propsInputValue : defaultInputValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    stateInputValue = _useState2[0],\n    setStateInputValue = _useState2[1];\n  var _useState3 = useState(propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen),\n    _useState4 = _slicedToArray(_useState3, 2),\n    stateMenuIsOpen = _useState4[0],\n    setStateMenuIsOpen = _useState4[1];\n  var _useState5 = useState(propsValue !== undefined ? propsValue : defaultValue),\n    _useState6 = _slicedToArray(_useState5, 2),\n    stateValue = _useState6[0],\n    setStateValue = _useState6[1];\n  var onChange = useCallback(function (value, actionMeta) {\n    if (typeof propsOnChange === 'function') {\n      propsOnChange(value, actionMeta);\n    }\n    setStateValue(value);\n  }, [propsOnChange]);\n  var onInputChange = useCallback(function (value, actionMeta) {\n    var newValue;\n    if (typeof propsOnInputChange === 'function') {\n      newValue = propsOnInputChange(value, actionMeta);\n    }\n    setStateInputValue(newValue !== undefined ? newValue : value);\n  }, [propsOnInputChange]);\n  var onMenuOpen = useCallback(function () {\n    if (typeof propsOnMenuOpen === 'function') {\n      propsOnMenuOpen();\n    }\n    setStateMenuIsOpen(true);\n  }, [propsOnMenuOpen]);\n  var onMenuClose = useCallback(function () {\n    if (typeof propsOnMenuClose === 'function') {\n      propsOnMenuClose();\n    }\n    setStateMenuIsOpen(false);\n  }, [propsOnMenuClose]);\n  var inputValue = propsInputValue !== undefined ? propsInputValue : stateInputValue;\n  var menuIsOpen = propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;\n  var value = propsValue !== undefined ? propsValue : stateValue;\n  return _objectSpread(_objectSpread({}, restSelectProps), {}, {\n    inputValue: inputValue,\n    menuIsOpen: menuIsOpen,\n    onChange: onChange,\n    onInputChange: onInputChange,\n    onMenuClose: onMenuClose,\n    onMenuOpen: onMenuOpen,\n    value: value\n  });\n}\n\nexport { useStateManager as u };\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { u as useStateManager } from './useStateManager-7e1e8489.esm.js';\nexport { u as useStateManager } from './useStateManager-7e1e8489.esm.js';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { forwardRef, useMemo } from 'react';\nimport { S as Select } from './Select-49a62830.esm.js';\nexport { c as createFilter, d as defaultTheme, m as mergeStyles } from './Select-49a62830.esm.js';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nexport { c as components } from './index-a301f526.esm.js';\nimport '@babel/runtime/helpers/objectSpread2';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/classCallCheck';\nimport '@babel/runtime/helpers/createClass';\nimport '@babel/runtime/helpers/inherits';\nimport '@babel/runtime/helpers/createSuper';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport 'memoize-one';\nimport '@babel/runtime/helpers/typeof';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport '@babel/runtime/helpers/defineProperty';\nimport 'react-dom';\nimport '@floating-ui/dom';\nimport 'use-isomorphic-layout-effect';\n\nvar StateManagedSelect = /*#__PURE__*/forwardRef(function (props, ref) {\n  var baseSelectProps = useStateManager(props);\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    ref: ref\n  }, baseSelectProps));\n});\nvar StateManagedSelect$1 = StateManagedSelect;\n\nvar NonceProvider = (function (_ref) {\n  var nonce = _ref.nonce,\n    children = _ref.children,\n    cacheKey = _ref.cacheKey;\n  var emotionCache = useMemo(function () {\n    return createCache({\n      key: cacheKey,\n      nonce: nonce\n    });\n  }, [cacheKey, nonce]);\n  return /*#__PURE__*/React.createElement(CacheProvider, {\n    value: emotionCache\n  }, children);\n});\n\nexport { NonceProvider, StateManagedSelect$1 as default };\n","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["CFormLabel","forwardRef","_a","ref","children","className","customClassName","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CFormFeedback","_c","as","Component","invalid","tooltip","valid","_b","concat","CFormControlValidation","describedby","feedback","feedbackInvalid","feedbackValid","tooltipFeedback","id","CFormFloating","CFormText","CFormControlWrapper","floatingClassName","floatingLabel","label","text","FormControlValidation","htmlFor","CFormSelect","htmlSize","options","size","map","option","index","disabled","undefined","value","key","CFormSwitch","reverse","type","_excluded","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","StateManagedSelect","props","baseSelectProps","_ref","_ref$defaultInputValu","defaultInputValue","_ref$defaultMenuIsOpe","defaultMenuIsOpen","_ref$defaultValue","defaultValue","propsInputValue","inputValue","propsMenuIsOpen","menuIsOpen","propsOnChange","onChange","propsOnInputChange","onInputChange","propsOnMenuClose","onMenuClose","propsOnMenuOpen","onMenuOpen","propsValue","restSelectProps","_objectWithoutProperties","_useState","useState","_useState2","_slicedToArray","stateInputValue","setStateInputValue","_useState3","_useState4","stateMenuIsOpen","setStateMenuIsOpen","_useState5","_useState6","stateValue","setStateValue","useCallback","actionMeta","newValue","_objectSpread","useStateManager","Select","_extends","StateManagedSelect$1","defaultDatasetIdKey","reforwardRef","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","ChartComponent","height","width","redraw","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","config","setTimeout","update","role","Chart","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Doughnut","DoughnutController"],"sourceRoot":""}